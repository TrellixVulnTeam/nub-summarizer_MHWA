So far in this course we've been working with one stock at a time. We're going to fix a couple other things too. Okay, just to refresh your memory, here's the kind of stuff that goes in a dataframe, our columns are the particular symbols of stocks that we're interested in, and our rows are dates. So time, goes from the top of the dataframe down to the bottom, and symbols, from left to right. Something that's very special about Pandas, and one of the things that makes it very powerful, is that we can index the rows by dates. We don't have to just use a single number like zero for instance. We need to be able to read in multiple stocks, instead of just, say having one. We want to have SPY, IBM, Google, and Gold all at once. We need to be able to align dates. For instance, If GLD traded on particular days and SPY traded on particular days we want to make sure that those line up, so that for each row we have the correct information for each equity on that particular date. Finally, we need to undo that problem that we discovered in the last lesson. Namely that these dates and the files we read them from are in reverse order. So, we want to be sure that we have them in the right order when we're processing them. So, these are the tasks we're going to dig into in this lesson. So pandis has many very powerful features, among those features are the ability to do many operations that you may be familiar with from databases. In particular, one that we're going to leverage here is adjoin. So we're going to join this data from SPY and our empty data frame. And we're going to do a special join that says, look, we're only interested in dates that are present both in SPY and df1. And what happens is, we end up with this data. According to its date and this position in our target dataframe, and, of course, the other two rows as well. But note, because of the join, these two days were missing from SPY and the result of the join is they are eliminated from our dataframe. They're eliminated because it's the weekend. There was no trading, because we know that because SPY is our reference. All right, so here's our original data frame now after we've loaded an SPY. And those weekend days that were here are gone because of that join. We used pandas date range method which takes two parameters, that is start and end date. For this code, we will take a small date range that is from 22nd Jan 2010 to 26th Jan 2010. We then call the date range function as I mentioned before, passing two parameters, start date and the end date. Let's run this code to see what variable dates has in it. The output you see is not the list of strings, but the list of date time index objects. Now, what do you mean by date time index object? Let's extract the foremost element of this list. You can get the forced element of the list by writing dates[0] Let's go ahead and run this code. This is the first element of the list which a date/time index object. The trailing zero zeros for each object is the default time stamp. The index for a stock data only consists of dates. We can ignore the time stamps for now. Next we define an empty dataframe df1 with these dates as index. We use the parameter index to supply the dates. Note that without this parameter the dataframe will have an index of integers 0,1,2 as seen before. Let's print this now. So here's your DataFrame, DF1. It's an empty DataFrame with no columns. However, as we pass the index parameter, we have an index as dates. And you can see that it's a date time index object. Two major steps have now been completed. Continuing on, let's read the csv file for SPY. In dfSPY, a temporary DataFrame. The next step is the heart of building the final DataFrame. We combine the empty DataFrame, df1, with the temporary DataFrame, dfSPY. We use the join function of the DataFrame for this purpose.