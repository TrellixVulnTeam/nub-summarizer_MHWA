In this lesson, we're going to learn about the NumPy numerical library. NumPy is a Python library that acts as a wrapper around underlying C and Fortran code. Because of that, it's very, very fast. NumPy focuses on matrices which are called in the arrays. The syntax is very similar to MATLAB, so if you've used MATLAB before It'll look familiar to you. NumPy is one of the important reasons people use Python for financial research. Now, how does NumPy relate to Pandas? Well, I said just a moment ago that NumPy is a wrapper for numerical libraries, well it turns out that Pandas is a kind of wrapper for NumPy. It's important to know that in NumPy, our columns and rows begin at 0. So this element is nd1[0,0]. It then continues of course, 1, 2, 3, 4 in the rows, and in the columns, 0, 1, 2, 3. Before I tell you, see if you can guess how to address this cell. The answer is that this cell is nd1 [3,2], 0, 1, 2, 3, 0, 1, 2. Now, this is probably the kind of stuff you've seen before. It turns out, though, that the NumPy is much more powerful and can do interesting and different kinds of slicing. What if, for instance, you wanted to address this sub portion of the nd array? How could you indicate that? NumPy uses a special symbol, the colon, to let you indicate ranges. So we can indicate this range in rows with 0:3, which indicates the zeroth to the, just before the third row. So you don't have to use the colon just to indicate a range. You can use it by itself for all of them. Now, look at this statement, see if you can figure out which part of this nd array it refers to before I show you. It is this region right here. So it's all the rows and column 3, 0, 1, 2, 3. So it's this section right here. NumPy includes some special syntax that lets you refer to the last row or column. It is good that we can access elements in a, but another important operation is assigning values to specific location in a. This will give us access to the element at the position 0, 0 in the a. We just assign the mean value to masking operation we performed before. Let's see the output. Observe that all the values previously less than mean have been replaced by the mean. This is one of the important operation that shows the power of the and justifies its extensive use throughout. Arithmetic operations on arrays are always applied element wise. Let's start with simple multiplication operation. Here we define a simple array so that we can easily track the changes. This will multiply each element by 2. Let's check the output. When using arithmetic operation, a new array is created and the values are stored in that array. So our original array a still holds the same values. And this is our new array which we get after multiplying array a by two. Observe that, it is element wise multiplication. Let's try division. Here we use the division operation to divide each element of array a by two. Let's check the output. Observe that, when you divide 1 by 2, you get a value 0 over here instead of 0.5. This is because both the array and the divisor are integers. If we were to do 2.0 instead of 2, you will get float values. Keep this point in mind before performing division in general. That is int divided by int will give you an integer output. To get float values, you need at least, the numerator or the denominator to be a float value. Let's check the output. Observe that, we could successfully get a floating point value instead of 0. How about arithmetic operation using two arrays? We will start with addition. We create another array b with these values. Now, let's just add a and b using the plus operator. As mentioned, this is element wise. This is our new arraya plus b. One important thing to note here is that the shape of a and b should be similar before the operation a plus b, else it will throw error. Similar to the addition, you can perform subtraction. Now, let's move ahead with multiplying two arrays. This is interesting, because unlike other many metrics languages multiplication operator when used with two array will not give you metric product, but will do element wise multiplication. That is, element at position 0,0 in array a is multiplied only with the element at position 0,0 in b. Let's print the multiplication of matrix a and b. Can you also element wise multiplication? But the next question would be, what about matrix multiplication? How do you achieve that? Like, for everything, Num Pi has a function. It has function called dot, which performs matrix multiplication. Similar to multiplication, division of two arrays can be performed. Just include division of operators between the two arrays. Let's check the output. As seen before, since array a and b are indigenous, we get the final array in the form of indigenous as well. If you want to see floating values, convert one of the arrays to float. Well, that's all for now. Keep practicing. All the operations and functions explained in this lesson are those which will help you perform computation. But there is a lot more to learn. Check out the link in the instructor notes. I will meet you in the next lesson with some more coding. Happy coding with Python and bye until then.